checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether UID '1000' is supported by ustar format... yes
checking whether GID '1000' is supported by ustar format... yes
checking how to create a ustar tar archive... gnutar
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking for style of include used by make... GNU
checking dependency style of gcc... gcc3
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking how to print strings... printf
checking for a sed that does not truncate output... /bin/sed
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for fgrep... /bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 1572864
checking whether the shell understands some XSI constructs... yes
checking whether the shell understands "+="... yes
checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop
checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for mt... no
checking if : is a manifest tool... no
checking how to run the C preprocessor... gcc -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... no
checking for pkg-config... /usr/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking for GLIB... yes
checking for gobject-introspection... yes
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating gee-0.8.pc
config.status: creating benchmark/Makefile
config.status: creating doc/Makefile
config.status: creating gee/Makefile
config.status: creating tests/Makefile
config.status: creating config.h
config.status: executing depfiles commands
config.status: executing libtool commands
make  all-recursive
make[1]: Entering directory '/sources/7.9/libgee-0.18.0'
Making all in gee
make[2]: Entering directory '/sources/7.9/libgee-0.18.0/gee'
  CC       libgee_0_8_la-assemblyinfo.lo
  CC       libgee_0_8_la-abstractbidirlist.lo
  CC       libgee_0_8_la-abstractbidirsortedset.lo
  CC       libgee_0_8_la-abstractbidirsortedmap.lo
  CC       libgee_0_8_la-abstractcollection.lo
  CC       libgee_0_8_la-abstractlist.lo
  CC       libgee_0_8_la-abstractmap.lo
  CC       libgee_0_8_la-abstractmultimap.lo
  CC       libgee_0_8_la-abstractmultiset.lo
  CC       libgee_0_8_la-abstractqueue.lo
  CC       libgee_0_8_la-abstractset.lo
  CC       libgee_0_8_la-abstractsortedmap.lo
  CC       libgee_0_8_la-abstractsortedset.lo
  CC       libgee_0_8_la-arraylist.lo
  CC       libgee_0_8_la-arrayqueue.lo
  CC       libgee_0_8_la-bidiriterator.lo
  CC       libgee_0_8_la-bidirlist.lo
  CC       libgee_0_8_la-bidirlistiterator.lo
  CC       libgee_0_8_la-bidirmapiterator.lo
  CC       libgee_0_8_la-bidirsortedset.lo
  CC       libgee_0_8_la-bidirsortedmap.lo
  CC       libgee_0_8_la-collection.lo
  CC       libgee_0_8_la-comparable.lo
  CC       libgee_0_8_la-concurrentlist.lo
  CC       libgee_0_8_la-concurrentset.lo
  CC       libgee_0_8_la-deque.lo
  CC       libgee_0_8_la-functions.lo
  CC       libgee_0_8_la-future.lo
  CC       libgee_0_8_la-hashable.lo
  CC       libgee_0_8_la-hashmap.lo
  CC       libgee_0_8_la-hashmultimap.lo
  CC       libgee_0_8_la-hashmultiset.lo
  CC       libgee_0_8_la-hashset.lo
  CC       libgee_0_8_la-hazardpointer.lo
  CC       libgee_0_8_la-iterable.lo
  CC       libgee_0_8_la-iterator.lo
  CC       libgee_0_8_la-lazy.lo
  CC       libgee_0_8_la-linkedlist.lo
  CC       libgee_0_8_la-lightmapfuture.lo
  CC       libgee_0_8_la-list.lo
  CC       libgee_0_8_la-listiterator.lo
  CC       libgee_0_8_la-map.lo
  CC       libgee_0_8_la-mapiterator.lo
  CC       libgee_0_8_la-multimap.lo
  CC       libgee_0_8_la-multiset.lo
  CC       libgee_0_8_la-priorityqueue.lo
  CC       libgee_0_8_la-promise.lo
  CC       libgee_0_8_la-queue.lo
  CC       libgee_0_8_la-readonlybidirlist.lo
  CC       libgee_0_8_la-readonlybidirsortedset.lo
  CC       libgee_0_8_la-readonlybidirsortedmap.lo
  CC       libgee_0_8_la-readonlycollection.lo
  CC       libgee_0_8_la-readonlylist.lo
  CC       libgee_0_8_la-readonlymap.lo
  CC       libgee_0_8_la-readonlymultimap.lo
  CC       libgee_0_8_la-readonlymultiset.lo
  CC       libgee_0_8_la-readonlyset.lo
  CC       libgee_0_8_la-readonlysortedmap.lo
  CC       libgee_0_8_la-readonlysortedset.lo
  CC       libgee_0_8_la-set.lo
  CC       libgee_0_8_la-sortedmap.lo
  CC       libgee_0_8_la-sortedset.lo
  CC       libgee_0_8_la-streamiterator.lo
  CC       libgee_0_8_la-task.lo
  CC       libgee_0_8_la-teeiterator.lo
  CC       libgee_0_8_la-timsort.lo
  CC       libgee_0_8_la-traversable.lo
  CC       libgee_0_8_la-treemap.lo
  CC       libgee_0_8_la-treemultimap.lo
  CC       libgee_0_8_la-treemultiset.lo
  CC       libgee_0_8_la-treeset.lo
  CC       libgee_0_8_la-unfolditerator.lo
  CC       libgee_0_8_la-unrolledlinkedlist.lo
  CCLD     libgee-0.8.la
/usr/bin/g-ir-compiler -l `/bin/sed -nE "s/^dlname='([A-Za-z0-9.+-]+)'/\1/p" libgee-0.8.la` -o Gee-0.8.typelib Gee-0.8.gir libgee-0.8.la
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0/gee'
Making all in tests
make[2]: Entering directory '/sources/7.9/libgee-0.18.0/tests'
  CC       tests-testarraylist.o
  CC       tests-testarrayqueue.o
  CC       tests-testbidirlist.o
  CC       tests-testbidirsortedset.o
  CC       tests-testbidirsortedmap.o
  CC       tests-testcase.o
  CC       tests-testcollection.o
  CC       tests-testconcurrentlist.o
  CC       tests-testconcurrentset.o
  CC       tests-testdata.o
  CC       tests-testdeque.o
  CC       tests-testfunctions.o
  CC       tests-testhashmap.o
  CC       tests-testhashmultimap.o
  CC       tests-testhashmultiset.o
  CC       tests-testhashset.o
  CC       tests-testlinkedlist.o
  CC       tests-testlinkedlistasdeque.o
  CC       tests-testlist.o
  CC       tests-testmain.o
  CC       tests-testmap.o
  CC       tests-testmultimap.o
  CC       tests-testmultiset.o
  CC       tests-testpriorityqueue.o
  CC       tests-testqueue.o
  CC       tests-testreadonlybidirlist.o
  CC       tests-testreadonlycollection.o
  CC       tests-testreadonlylist.o
  CC       tests-testreadonlymap.o
  CC       tests-testreadonlyset.o
  CC       tests-testset.o
  CC       tests-testsortedset.o
  CC       tests-testsortedmap.o
  CC       tests-testtreemap.o
  CC       tests-testtreemultimap.o
  CC       tests-testtreemultiset.o
  CC       tests-testtreeset.o
  CC       tests-testunrolledlinkedlist.o
  CC       tests-testunrolledlinkedlistasdeque.o
  CCLD     tests
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0/tests'
make[2]: Entering directory '/sources/7.9/libgee-0.18.0'
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0'
Making check in gee
make[1]: Entering directory '/sources/7.9/libgee-0.18.0/gee'
  CCLD     libgee-0.8.la
/usr/bin/g-ir-compiler -l `/bin/sed -nE "s/^dlname='([A-Za-z0-9.+-]+)'/\1/p" libgee-0.8.la` -o Gee-0.8.typelib Gee-0.8.gir libgee-0.8.la
make  check-local
make[2]: Entering directory '/sources/7.9/libgee-0.18.0/gee'
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0/gee'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0/gee'
Making check in tests
make[1]: Entering directory '/sources/7.9/libgee-0.18.0/tests'
make  check-local
make[2]: Entering directory '/sources/7.9/libgee-0.18.0/tests'
TEST: tests... (pid=5018)
  /ArrayList/[Collection] type correctness:                            OK
  /ArrayList/[Collection] iterator returns all elements once:          OK
  /ArrayList/[Collection] mutable iterator:                            OK
  /ArrayList/[Collection] contains, size and is_empty:                 OK
  /ArrayList/[Collection] add and remove:                              OK
  /ArrayList/[Collection] clear:                                       OK
  /ArrayList/[Collection] add_all:                                     OK
  /ArrayList/[Collection] contains_all:                                OK
  /ArrayList/[Collection] remove_all:                                  OK
  /ArrayList/[Collection] retain_all:                                  OK
  /ArrayList/[Collection] to_array:                                    OK
  /ArrayList/[Collection] GObject properties:                          OK
  /ArrayList/[Collection] foreach:                                     OK
  /ArrayList/[Collection] fold:                                        OK
  /ArrayList/[Collection] map:                                         OK
  /ArrayList/[Collection] scan:                                        OK
  /ArrayList/[Collection] filter:                                      OK
  /ArrayList/[Collection] chop:                                        OK
  /ArrayList/[List] iterator is ordered:                               OK
  /ArrayList/[List] list iterator:                                     OK
  /ArrayList/[List] duplicates are retained:                           OK
  /ArrayList/[List] get:                                               OK
  /ArrayList/[List] set:                                               OK
  /ArrayList/[List] insert:                                            OK
  /ArrayList/[List] remove_at:                                         OK
  /ArrayList/[List] index_of:                                          OK
  /ArrayList/[List] first:                                             OK
  /ArrayList/[List] last:                                              OK
  /ArrayList/[List] insert_all:                                        OK
  /ArrayList/[List] slice:                                             OK
  /ArrayList/[List] bi-directional list iterator:                      OK
  /ArrayList/[ArrayList] selected functions:                           OK
  /ArrayList/[ArrayList] small sort (insertion):                       OK
  /ArrayList/[ArrayList] big sort (timsort):                           OK
  /ArrayList/[ArrayList] typed to_array calls:                         OK
  /ArrayQueue/[Collection] type correctness:                           OK
  /ArrayQueue/[Collection] iterator returns all elements once:         OK
  /ArrayQueue/[Collection] mutable iterator:                           OK
  /ArrayQueue/[Collection] contains, size and is_empty:                OK
  /ArrayQueue/[Collection] add and remove:                             OK
  /ArrayQueue/[Collection] clear:                                      OK
  /ArrayQueue/[Collection] add_all:                                    OK
  /ArrayQueue/[Collection] contains_all:                               OK
  /ArrayQueue/[Collection] remove_all:                                 OK
  /ArrayQueue/[Collection] retain_all:                                 OK
  /ArrayQueue/[Collection] to_array:                                   OK
  /ArrayQueue/[Collection] GObject properties:                         OK
  /ArrayQueue/[Collection] foreach:                                    OK
  /ArrayQueue/[Collection] fold:                                       OK
  /ArrayQueue/[Collection] map:                                        OK
  /ArrayQueue/[Collection] scan:                                       OK
  /ArrayQueue/[Collection] filter:                                     OK
  /ArrayQueue/[Collection] chop:                                       OK
  /ArrayQueue/[Queue] capacity bound:                                  OK
  /ArrayQueue/[Queue] one element operation:                           OK
  /ArrayQueue/[Queue] GObject properties:                              OK
  /ArrayQueue/[Deque] queue use:                                       OK
  /ArrayQueue/[Deque] stack use:                                       OK
  /ArrayQueue/[Deque] reversed stack use:                              OK
  /ConcurrentList/[Collection] type correctness:                       OK
  /ConcurrentList/[Collection] iterator returns all elements once:     OK
  /ConcurrentList/[Collection] mutable iterator:                       OK
  /ConcurrentList/[Collection] contains, size and is_empty:            OK
  /ConcurrentList/[Collection] add and remove:                         OK
  /ConcurrentList/[Collection] clear:                                  OK
  /ConcurrentList/[Collection] add_all:                                OK
  /ConcurrentList/[Collection] contains_all:                           OK
  /ConcurrentList/[Collection] remove_all:                             OK
  /ConcurrentList/[Collection] retain_all:                             OK
  /ConcurrentList/[Collection] to_array:                               OK
  /ConcurrentList/[Collection] GObject properties:                     OK
  /ConcurrentList/[Collection] foreach:                                OK
  /ConcurrentList/[Collection] fold:                                   OK
  /ConcurrentList/[Collection] map:                                    OK
  /ConcurrentList/[Collection] scan:                                   OK
  /ConcurrentList/[Collection] filter:                                 OK
  /ConcurrentList/[Collection] chop:                                   OK
  /ConcurrentList/[List] iterator is ordered:                          OK
  /ConcurrentList/[List] list iterator:                                OK
  /ConcurrentList/[List] duplicates are retained:                      OK
  /ConcurrentList/[List] get:                                          OK
  /ConcurrentList/[List] set:                                          OK
  /ConcurrentList/[List] insert:                                       OK
  /ConcurrentList/[List] remove_at:                                    OK
  /ConcurrentList/[List] index_of:                                     OK
  /ConcurrentList/[List] first:                                        OK
  /ConcurrentList/[List] last:                                         OK
  /ConcurrentList/[List] insert_all:                                   OK
  /ConcurrentList/[List] slice:                                        OK
  /ConcurrentSet/[Collection] type correctness:                        OK
  /ConcurrentSet/[Collection] iterator returns all elements once:      OK
  /ConcurrentSet/[Collection] mutable iterator:                        OK
  /ConcurrentSet/[Collection] contains, size and is_empty:             OK
  /ConcurrentSet/[Collection] add and remove:                          OK
  /ConcurrentSet/[Collection] clear:                                   OK
  /ConcurrentSet/[Collection] add_all:                                 OK
  /ConcurrentSet/[Collection] contains_all:                            OK
  /ConcurrentSet/[Collection] remove_all:                              OK
  /ConcurrentSet/[Collection] retain_all:                              OK
  /ConcurrentSet/[Collection] to_array:                                OK
  /ConcurrentSet/[Collection] GObject properties:                      OK
  /ConcurrentSet/[Collection] foreach:                                 OK
  /ConcurrentSet/[Collection] fold:                                    OK
  /ConcurrentSet/[Collection] map:                                     OK
  /ConcurrentSet/[Collection] scan:                                    OK
  /ConcurrentSet/[Collection] filter:                                  OK
  /ConcurrentSet/[Collection] chop:                                    OK
  /ConcurrentSet/[Set] duplicates are ignored:                         OK
  /ConcurrentSet/[SortedSet] first:                                    OK
  /ConcurrentSet/[SortedSet] last:                                     OK
  /ConcurrentSet/[SortedSet] ordering:                                 OK
  /ConcurrentSet/[SortedSet] iterator at:                              OK
  /ConcurrentSet/[SortedSet] lower:                                    OK
  /ConcurrentSet/[SortedSet] higher:                                   OK
  /ConcurrentSet/[SortedSet] floor:                                    OK
  /ConcurrentSet/[SortedSet] ceil:                                     OK
  /ConcurrentSet/Head Subset/[Collection] size:                        OK
  /ConcurrentSet/Head Subset/[Collection] contains:                    OK
  /ConcurrentSet/Head Subset/[Collection] add:                         OK
  /ConcurrentSet/Head Subset/[Collection] remove:                      OK
  /ConcurrentSet/Head Subset/[Collection] iterator:                    OK
  /ConcurrentSet/Head Subset/[Collection] clear:                       OK
  /ConcurrentSet/Head Subset/[SortedSet] iterator at:                  OK
  /ConcurrentSet/Head Subset/[SortedSet] lower:                        OK
  /ConcurrentSet/Head Subset/[SortedSet] higher:                       OK
  /ConcurrentSet/Head Subset/[SortedSet] ceil:                         OK
  /ConcurrentSet/Head Subset/[SortedSet] floor:                        OK
  /ConcurrentSet/Head Subset/[SortedSet] subsets:                      OK
  /ConcurrentSet/Head Subset/[SortedSet] boundaries:                   OK
  /ConcurrentSet/Tail Subset/[Collection] size:                        OK
  /ConcurrentSet/Tail Subset/[Collection] contains:                    OK
  /ConcurrentSet/Tail Subset/[Collection] add:                         OK
  /ConcurrentSet/Tail Subset/[Collection] remove:                      OK
  /ConcurrentSet/Tail Subset/[Collection] iterator:                    OK
  /ConcurrentSet/Tail Subset/[Collection] clear:                       OK
  /ConcurrentSet/Tail Subset/[SortedSet] iterator at:                  OK
  /ConcurrentSet/Tail Subset/[SortedSet] lower:                        OK
  /ConcurrentSet/Tail Subset/[SortedSet] higher:                       OK
  /ConcurrentSet/Tail Subset/[SortedSet] ceil:                         OK
  /ConcurrentSet/Tail Subset/[SortedSet] floor:                        OK
  /ConcurrentSet/Tail Subset/[SortedSet] subsets:                      OK
  /ConcurrentSet/Tail Subset/[SortedSet] boundaries:                   OK
  /ConcurrentSet/Range Subset/[Collection] size:                       OK
  /ConcurrentSet/Range Subset/[Collection] contains:                   OK
  /ConcurrentSet/Range Subset/[Collection] add:                        OK
  /ConcurrentSet/Range Subset/[Collection] remove:                     OK
  /ConcurrentSet/Range Subset/[Collection] iterator:                   OK
  /ConcurrentSet/Range Subset/[Collection] clear:                      OK
  /ConcurrentSet/Range Subset/[SortedSet] iterator at:                 OK
  /ConcurrentSet/Range Subset/[SortedSet] lower:                       OK
  /ConcurrentSet/Range Subset/[SortedSet] higher:                      OK
  /ConcurrentSet/Range Subset/[SortedSet] ceil:                        OK
  /ConcurrentSet/Range Subset/[SortedSet] floor:                       OK
  /ConcurrentSet/Range Subset/[SortedSet] subsets:                     OK
  /ConcurrentSet/Range Subset/[SortedSet] boundaries:                  OK
  /ConcurrentSet/Empty Subset/[Collection] size:                       OK
  /ConcurrentSet/Empty Subset/[Collection] contains:                   OK
  /ConcurrentSet/Empty Subset/[Collection] add:                        OK
  /ConcurrentSet/Empty Subset/[Collection] remove:                     OK
  /ConcurrentSet/Empty Subset/[Collection] iterator:                   OK
  /ConcurrentSet/Empty Subset/[Collection] clear:                      OK
  /ConcurrentSet/Empty Subset/[SortedSet] iterator at:                 OK
  /ConcurrentSet/Empty Subset/[SortedSet] lower:                       OK
  /ConcurrentSet/Empty Subset/[SortedSet] higher:                      OK
  /ConcurrentSet/Empty Subset/[SortedSet] ceil:                        OK
  /ConcurrentSet/Empty Subset/[SortedSet] floor:                       OK
  /ConcurrentSet/Empty Subset/[SortedSet] subsets:                     OK
  /ConcurrentSet/Empty Subset/[SortedSet] boundaries:                  OK
  /Functions/[Functions] comparing and hashing strings:                OK
  /Functions/[Functions] comparing and hashing int:                    OK
  /Functions/[Functions] comparing instances of Comparable:            OK
  /Functions/[Functions] comparing and hashing instances of Hashable:  OK
  /Functions/[Iterator] unfold:                                        OK
  /Functions/[Iterator] concat:                                        OK
  /HashMap/[Map] type correctness:                                     OK
  /HashMap/[Map] has_key, size and is_empty:                           OK
  /HashMap/[Map] keys:                                                 OK
  /HashMap/[Map] values:                                               OK
  /HashMap/[Map] entries:                                              OK
  /HashMap/[Map] set all:                                              OK
  /HashMap/[Map] unset all:                                            OK
  /HashMap/[Map] has all:                                              OK
  /HashMap/[Map] GObject properties:                                   OK
  /HashMap/[Map] fold:                                                 OK
  /HashMap/[Map] foreach:                                              OK
  /HashMultiMap/[MultiMap] type correctness:                           OK
  /HashMultiMap/[MultiMap] size:                                       OK
  /HashMultiMap/[MultiMap] getting and setting:                        OK
  /HashMultiMap/[MultiMap] keys, all keys and values:                  OK
  /HashMultiMap/[HashMultiMap] selected functions:                     OK
  /HashMultiSet/[Collection] type correctness:                         OK
  /HashMultiSet/[Collection] iterator returns all elements once:       OK
  /HashMultiSet/[Collection] mutable iterator:                         OK
  /HashMultiSet/[Collection] contains, size and is_empty:              OK
  /HashMultiSet/[Collection] add and remove:                           OK
  /HashMultiSet/[Collection] clear:                                    OK
  /HashMultiSet/[Collection] add_all:                                  OK
  /HashMultiSet/[Collection] contains_all:                             OK
  /HashMultiSet/[Collection] remove_all:                               OK
  /HashMultiSet/[Collection] retain_all:                               OK
  /HashMultiSet/[Collection] to_array:                                 OK
  /HashMultiSet/[Collection] GObject properties:                       OK
  /HashMultiSet/[Collection] foreach:                                  OK
  /HashMultiSet/[Collection] fold:                                     OK
  /HashMultiSet/[Collection] map:                                      OK
  /HashMultiSet/[Collection] scan:                                     OK
  /HashMultiSet/[Collection] filter:                                   OK
  /HashMultiSet/[Collection] chop:                                     OK
  /HashMultiSet/[MultiSet] duplicates are retained:                    OK
  /HashMultiSet/[HashMultiSet] selected functions:                     OK
  /HashSet/[Collection] type correctness:                              OK
  /HashSet/[Collection] iterator returns all elements once:            OK
  /HashSet/[Collection] mutable iterator:                              OK
  /HashSet/[Collection] contains, size and is_empty:                   OK
  /HashSet/[Collection] add and remove:                                OK
  /HashSet/[Collection] clear:                                         OK
  /HashSet/[Collection] add_all:                                       OK
  /HashSet/[Collection] contains_all:                                  OK
  /HashSet/[Collection] remove_all:                                    OK
  /HashSet/[Collection] retain_all:                                    OK
  /HashSet/[Collection] to_array:                                      OK
  /HashSet/[Collection] GObject properties:                            OK
  /HashSet/[Collection] foreach:                                       OK
  /HashSet/[Collection] fold:                                          OK
  /HashSet/[Collection] map:                                           OK
  /HashSet/[Collection] scan:                                          OK
  /HashSet/[Collection] filter:                                        OK
  /HashSet/[Collection] chop:                                          OK
  /HashSet/[Set] duplicates are ignored:                               OK
  /LinkedList/[Collection] type correctness:                           OK
  /LinkedList/[Collection] iterator returns all elements once:         OK
  /LinkedList/[Collection] mutable iterator:                           OK
  /LinkedList/[Collection] contains, size and is_empty:                OK
  /LinkedList/[Collection] add and remove:                             OK
  /LinkedList/[Collection] clear:                                      OK
  /LinkedList/[Collection] add_all:                                    OK
  /LinkedList/[Collection] contains_all:                               OK
  /LinkedList/[Collection] remove_all:                                 OK
  /LinkedList/[Collection] retain_all:                                 OK
  /LinkedList/[Collection] to_array:                                   OK
  /LinkedList/[Collection] GObject properties:                         OK
  /LinkedList/[Collection] foreach:                                    OK
  /LinkedList/[Collection] fold:                                       OK
  /LinkedList/[Collection] map:                                        OK
  /LinkedList/[Collection] scan:                                       OK
  /LinkedList/[Collection] filter:                                     OK
  /LinkedList/[Collection] chop:                                       OK
  /LinkedList/[List] iterator is ordered:                              OK
  /LinkedList/[List] list iterator:                                    OK
  /LinkedList/[List] duplicates are retained:                          OK
  /LinkedList/[List] get:                                              OK
  /LinkedList/[List] set:                                              OK
  /LinkedList/[List] insert:                                           OK
  /LinkedList/[List] remove_at:                                        OK
  /LinkedList/[List] index_of:                                         OK
  /LinkedList/[List] first:                                            OK
  /LinkedList/[List] last:                                             OK
  /LinkedList/[List] insert_all:                                       OK
  /LinkedList/[List] slice:                                            OK
  /LinkedList/[List] bi-directional list iterator:                     OK
  /LinkedList/[LinkedList] sort:                                       OK
  /LinkedList as Deque/[Collection] type correctness:                  OK
 /LinkedList as Deque/[Collection] iterator returns all elements once: OK
  /LinkedList as Deque/[Collection] mutable iterator:                  OK
  /LinkedList as Deque/[Collection] contains, size and is_empty:       OK
  /LinkedList as Deque/[Collection] add and remove:                    OK
  /LinkedList as Deque/[Collection] clear:                             OK
  /LinkedList as Deque/[Collection] add_all:                           OK
  /LinkedList as Deque/[Collection] contains_all:                      OK
  /LinkedList as Deque/[Collection] remove_all:                        OK
  /LinkedList as Deque/[Collection] retain_all:                        OK
  /LinkedList as Deque/[Collection] to_array:                          OK
  /LinkedList as Deque/[Collection] GObject properties:                OK
  /LinkedList as Deque/[Collection] foreach:                           OK
  /LinkedList as Deque/[Collection] fold:                              OK
  /LinkedList as Deque/[Collection] map:                               OK
  /LinkedList as Deque/[Collection] scan:                              OK
  /LinkedList as Deque/[Collection] filter:                            OK
  /LinkedList as Deque/[Collection] chop:                              OK
  /LinkedList as Deque/[Queue] capacity bound:                         OK
  /LinkedList as Deque/[Queue] one element operation:                  OK
  /LinkedList as Deque/[Queue] GObject properties:                     OK
  /LinkedList as Deque/[Deque] queue use:                              OK
  /LinkedList as Deque/[Deque] stack use:                              OK
  /LinkedList as Deque/[Deque] reversed stack use:                     OK
  /LinkedList as Deque/[LinkedList] selected functions:                OK
  /PriorityQueue/[Collection] type correctness:                        OK
  /PriorityQueue/[Collection] iterator returns all elements once:      OK
  /PriorityQueue/[Collection] mutable iterator:                        OK
  /PriorityQueue/[Collection] contains, size and is_empty:             OK
  /PriorityQueue/[Collection] add and remove:                          OK
  /PriorityQueue/[Collection] clear:                                   OK
  /PriorityQueue/[Collection] add_all:                                 OK
  /PriorityQueue/[Collection] contains_all:                            OK
  /PriorityQueue/[Collection] remove_all:                              OK
  /PriorityQueue/[Collection] retain_all:                              OK
  /PriorityQueue/[Collection] to_array:                                OK
  /PriorityQueue/[Collection] GObject properties:                      OK
  /PriorityQueue/[Collection] foreach:                                 OK
  /PriorityQueue/[Collection] fold:                                    OK
  /PriorityQueue/[Collection] map:                                     OK
  /PriorityQueue/[Collection] scan:                                    OK
  /PriorityQueue/[Collection] filter:                                  OK
  /PriorityQueue/[Collection] chop:                                    OK
  /PriorityQueue/[Queue] capacity bound:                               OK
  /PriorityQueue/[Queue] one element operation:                        OK
  /PriorityQueue/[Queue] GObject properties:                           OK
  /PriorityQueue/[PriorityQueue] poll gives minimum:                   OK
/ReadOnlyBidirList/[ReadOnlyCollection] unique read-only view instance: OK
  /ReadOnlyBidirList/[ReadOnlyCollection] immutable iterator:          OK
  /ReadOnlyBidirList/[ReadOnlyCollection] immutable:                   OK
  /ReadOnlyBidirList/[ReadOnlyCollection] accurate view:               OK
  /ReadOnlyBidirList/[ReadOnlyList] immutable iterator:                OK
  /ReadOnlyBidirList/[ReadOnlyList] immutable:                         OK
  /ReadOnlyBidirList/[ReadOnlyList] accurate view:                     OK
  /ReadOnlyBidirList/[ReadOnlyBidirList] immutable iterator:           OK
/ReadOnlyCollection/[ReadOnlyCollection] unique read-only view instance: OK
  /ReadOnlyCollection/[ReadOnlyCollection] immutable iterator:         OK
  /ReadOnlyCollection/[ReadOnlyCollection] immutable:                  OK
  /ReadOnlyCollection/[ReadOnlyCollection] accurate view:              OK
  /ReadOnlyList/[ReadOnlyCollection] unique read-only view instance:   OK
  /ReadOnlyList/[ReadOnlyCollection] immutable iterator:               OK
  /ReadOnlyList/[ReadOnlyCollection] immutable:                        OK
  /ReadOnlyList/[ReadOnlyCollection] accurate view:                    OK
  /ReadOnlyList/[ReadOnlyList] immutable iterator:                     OK
  /ReadOnlyList/[ReadOnlyList] immutable:                              OK
  /ReadOnlyList/[ReadOnlyList] accurate view:                          OK
  /ReadOnlyMap/[ReadOnlyMap] unique read-only view instance:           OK
  /ReadOnlyMap/[ReadOnlyMap] immutable iterator:                       OK
  /ReadOnlyMap/[ReadOnlyMap] immutable:                                OK
  /ReadOnlyMap/[ReadOnlyMap] accurate view:                            OK
  /ReadOnlySet/[ReadOnlyCollection] unique read-only view instance:    OK
  /ReadOnlySet/[ReadOnlyCollection] immutable iterator:                OK
  /ReadOnlySet/[ReadOnlyCollection] immutable:                         OK
  /ReadOnlySet/[ReadOnlyCollection] accurate view:                     OK
  /TreeMap/[Map] type correctness:                                     OK
  /TreeMap/[Map] has_key, size and is_empty:                           OK
  /TreeMap/[Map] keys:                                                 OK
  /TreeMap/[Map] values:                                               OK
  /TreeMap/[Map] entries:                                              OK
  /TreeMap/[Map] set all:                                              OK
  /TreeMap/[Map] unset all:                                            OK
  /TreeMap/[Map] has all:                                              OK
  /TreeMap/[Map] GObject properties:                                   OK
  /TreeMap/[Map] fold:                                                 OK
  /TreeMap/[Map] foreach:                                              OK
  /TreeMap/[SortedMap] key ordering:                                   OK
  /TreeMap/[SortedMap] first:                                          OK
  /TreeMap/[SortedMap] last:                                           OK
  /TreeMap/[SortedMap] iterator_at:                                    OK
  /TreeMap/[SortedMap] lower:                                          OK
  /TreeMap/[SortedMap] higher:                                         OK
  /TreeMap/[SortedMap] floor:                                          OK
  /TreeMap/[SortedMap] ceil:                                           OK
  /TreeMap/[SortedMap] bi-directional iterators can go backward:       OK
  /TreeMap/[SortedSet] bi-directional iterators can to end:            OK
  /TreeMap/Head Submap/[Map] has_key, size and is_empty:               OK
  /TreeMap/Head Submap/[Map] keys:                                     OK
  /TreeMap/Head Submap/[Map] values:                                   OK
  /TreeMap/Head Submap/[Map] entries:                                  OK
  /TreeMap/Head Submap/[Map] get:                                      OK
  /TreeMap/Head Submap/[Map] set:                                      OK
  /TreeMap/Head Submap/[Map] unset:                                    OK
  /TreeMap/Head Submap/[Map] clear:                                    OK
  /TreeMap/Head Submap/[Map] iterators:                                OK
  /TreeMap/Head Submap/[SortedMap] boundaries:                         OK
  /TreeMap/Head Submap/[SortedMap] lower:                              OK
  /TreeMap/Head Submap/[SortedMap] higher:                             OK
  /TreeMap/Head Submap/[SortedMap] floor:                              OK
  /TreeMap/Head Submap/[SortedMap] ceil:                               OK
  /TreeMap/Head Submap/[SortedMap] iterator_at:                        OK
  /TreeMap/Head Submap/[SortedMap] submap and subsets:                 OK
  /TreeMap/Tail Submap/[Map] has_key, size and is_empty:               OK
  /TreeMap/Tail Submap/[Map] keys:                                     OK
  /TreeMap/Tail Submap/[Map] values:                                   OK
  /TreeMap/Tail Submap/[Map] entries:                                  OK
  /TreeMap/Tail Submap/[Map] get:                                      OK
  /TreeMap/Tail Submap/[Map] set:                                      OK
  /TreeMap/Tail Submap/[Map] unset:                                    OK
  /TreeMap/Tail Submap/[Map] clear:                                    OK
  /TreeMap/Tail Submap/[Map] iterators:                                OK
  /TreeMap/Tail Submap/[SortedMap] boundaries:                         OK
  /TreeMap/Tail Submap/[SortedMap] lower:                              OK
  /TreeMap/Tail Submap/[SortedMap] higher:                             OK
  /TreeMap/Tail Submap/[SortedMap] floor:                              OK
  /TreeMap/Tail Submap/[SortedMap] ceil:                               OK
  /TreeMap/Tail Submap/[SortedMap] iterator_at:                        OK
  /TreeMap/Tail Submap/[SortedMap] submap and subsets:                 OK
  /TreeMap/Range Submap/[Map] has_key, size and is_empty:              OK
  /TreeMap/Range Submap/[Map] keys:                                    OK
  /TreeMap/Range Submap/[Map] values:                                  OK
  /TreeMap/Range Submap/[Map] entries:                                 OK
  /TreeMap/Range Submap/[Map] get:                                     OK
  /TreeMap/Range Submap/[Map] set:                                     OK
  /TreeMap/Range Submap/[Map] unset:                                   OK
  /TreeMap/Range Submap/[Map] clear:                                   OK
  /TreeMap/Range Submap/[Map] iterators:                               OK
  /TreeMap/Range Submap/[SortedMap] boundaries:                        OK
  /TreeMap/Range Submap/[SortedMap] lower:                             OK
  /TreeMap/Range Submap/[SortedMap] higher:                            OK
  /TreeMap/Range Submap/[SortedMap] floor:                             OK
  /TreeMap/Range Submap/[SortedMap] ceil:                              OK
  /TreeMap/Range Submap/[SortedMap] iterator_at:                       OK
  /TreeMap/Range Submap/[SortedMap] submap and subsets:                OK
  /TreeMap/Empty Submap/[Map] has_key, size and is_empty:              OK
  /TreeMap/Empty Submap/[Map] keys:                                    OK
  /TreeMap/Empty Submap/[Map] values:                                  OK
  /TreeMap/Empty Submap/[Map] entries:                                 OK
  /TreeMap/Empty Submap/[Map] get:                                     OK
  /TreeMap/Empty Submap/[Map] set:                                     OK
  /TreeMap/Empty Submap/[Map] unset:                                   OK
  /TreeMap/Empty Submap/[Map] clear:                                   OK
  /TreeMap/Empty Submap/[Map] iterators:                               OK
  /TreeMap/Empty Submap/[SortedMap] boundaries:                        OK
  /TreeMap/Empty Submap/[SortedMap] lower:                             OK
  /TreeMap/Empty Submap/[SortedMap] higher:                            OK
  /TreeMap/Empty Submap/[SortedMap] floor:                             OK
  /TreeMap/Empty Submap/[SortedMap] ceil:                              OK
  /TreeMap/Empty Submap/[SortedMap] iterator_at:                       OK
  /TreeMap/Empty Submap/[SortedMap] submap and subsets:                OK
  /TreeMap/Head Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeMap/Tail Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeMap/Range Subset/[BidirSortedSet] bi-directional iterator:      OK
  /TreeMap/Empty Subset/[BidirSortedSet] bi-directional iterator:      OK
  /TreeMultiMap/[MultiMap] type correctness:                           OK
  /TreeMultiMap/[MultiMap] size:                                       OK
  /TreeMultiMap/[MultiMap] getting and setting:                        OK
  /TreeMultiMap/[MultiMap] keys, all keys and values:                  OK
  /TreeMultiSet/[Collection] type correctness:                         OK
  /TreeMultiSet/[Collection] iterator returns all elements once:       OK
  /TreeMultiSet/[Collection] mutable iterator:                         OK
  /TreeMultiSet/[Collection] contains, size and is_empty:              OK
  /TreeMultiSet/[Collection] add and remove:                           OK
  /TreeMultiSet/[Collection] clear:                                    OK
  /TreeMultiSet/[Collection] add_all:                                  OK
  /TreeMultiSet/[Collection] contains_all:                             OK
  /TreeMultiSet/[Collection] remove_all:                               OK
  /TreeMultiSet/[Collection] retain_all:                               OK
  /TreeMultiSet/[Collection] to_array:                                 OK
  /TreeMultiSet/[Collection] GObject properties:                       OK
  /TreeMultiSet/[Collection] foreach:                                  OK
  /TreeMultiSet/[Collection] fold:                                     OK
  /TreeMultiSet/[Collection] map:                                      OK
  /TreeMultiSet/[Collection] scan:                                     OK
  /TreeMultiSet/[Collection] filter:                                   OK
  /TreeMultiSet/[Collection] chop:                                     OK
  /TreeMultiSet/[MultiSet] duplicates are retained:                    OK
  /TreeSet/[Collection] type correctness:                              OK
  /TreeSet/[Collection] iterator returns all elements once:            OK
  /TreeSet/[Collection] mutable iterator:                              OK
  /TreeSet/[Collection] contains, size and is_empty:                   OK
  /TreeSet/[Collection] add and remove:                                OK
  /TreeSet/[Collection] clear:                                         OK
  /TreeSet/[Collection] add_all:                                       OK
  /TreeSet/[Collection] contains_all:                                  OK
  /TreeSet/[Collection] remove_all:                                    OK
  /TreeSet/[Collection] retain_all:                                    OK
  /TreeSet/[Collection] to_array:                                      OK
  /TreeSet/[Collection] GObject properties:                            OK
  /TreeSet/[Collection] foreach:                                       OK
  /TreeSet/[Collection] fold:                                          OK
  /TreeSet/[Collection] map:                                           OK
  /TreeSet/[Collection] scan:                                          OK
  /TreeSet/[Collection] filter:                                        OK
  /TreeSet/[Collection] chop:                                          OK
  /TreeSet/[Set] duplicates are ignored:                               OK
  /TreeSet/[SortedSet] first:                                          OK
  /TreeSet/[SortedSet] last:                                           OK
  /TreeSet/[SortedSet] ordering:                                       OK
  /TreeSet/[SortedSet] iterator at:                                    OK
  /TreeSet/[SortedSet] lower:                                          OK
  /TreeSet/[SortedSet] higher:                                         OK
  /TreeSet/[SortedSet] floor:                                          OK
  /TreeSet/[SortedSet] ceil:                                           OK
  /TreeSet/[SortedSet] bi-directional iterators can go backward:       OK
  /TreeSet/[SortedSet] bi-directional iterators are mutable:           OK
  /TreeSet/[SortedSet] bi-directional iterators can to beginning:      OK
  /TreeSet/[SortedSet] bi-directional iterators can to end:            OK
  /TreeSet/[TreeSet] add and remove:                                   OK
  /TreeSet/Head Subset/[Collection] size:                              OK
  /TreeSet/Head Subset/[Collection] contains:                          OK
  /TreeSet/Head Subset/[Collection] add:                               OK
  /TreeSet/Head Subset/[Collection] remove:                            OK
  /TreeSet/Head Subset/[Collection] iterator:                          OK
  /TreeSet/Head Subset/[Collection] clear:                             OK
  /TreeSet/Head Subset/[SortedSet] iterator at:                        OK
  /TreeSet/Head Subset/[SortedSet] lower:                              OK
  /TreeSet/Head Subset/[SortedSet] higher:                             OK
  /TreeSet/Head Subset/[SortedSet] ceil:                               OK
  /TreeSet/Head Subset/[SortedSet] floor:                              OK
  /TreeSet/Head Subset/[SortedSet] subsets:                            OK
  /TreeSet/Head Subset/[SortedSet] boundaries:                         OK
  /TreeSet/Tail Subset/[Collection] size:                              OK
  /TreeSet/Tail Subset/[Collection] contains:                          OK
  /TreeSet/Tail Subset/[Collection] add:                               OK
  /TreeSet/Tail Subset/[Collection] remove:                            OK
  /TreeSet/Tail Subset/[Collection] iterator:                          OK
  /TreeSet/Tail Subset/[Collection] clear:                             OK
  /TreeSet/Tail Subset/[SortedSet] iterator at:                        OK
  /TreeSet/Tail Subset/[SortedSet] lower:                              OK
  /TreeSet/Tail Subset/[SortedSet] higher:                             OK
  /TreeSet/Tail Subset/[SortedSet] ceil:                               OK
  /TreeSet/Tail Subset/[SortedSet] floor:                              OK
  /TreeSet/Tail Subset/[SortedSet] subsets:                            OK
  /TreeSet/Tail Subset/[SortedSet] boundaries:                         OK
  /TreeSet/Range Subset/[Collection] size:                             OK
  /TreeSet/Range Subset/[Collection] contains:                         OK
  /TreeSet/Range Subset/[Collection] add:                              OK
  /TreeSet/Range Subset/[Collection] remove:                           OK
  /TreeSet/Range Subset/[Collection] iterator:                         OK
  /TreeSet/Range Subset/[Collection] clear:                            OK
  /TreeSet/Range Subset/[SortedSet] iterator at:                       OK
  /TreeSet/Range Subset/[SortedSet] lower:                             OK
  /TreeSet/Range Subset/[SortedSet] higher:                            OK
  /TreeSet/Range Subset/[SortedSet] ceil:                              OK
  /TreeSet/Range Subset/[SortedSet] floor:                             OK
  /TreeSet/Range Subset/[SortedSet] subsets:                           OK
  /TreeSet/Range Subset/[SortedSet] boundaries:                        OK
  /TreeSet/Empty Subset/[Collection] size:                             OK
  /TreeSet/Empty Subset/[Collection] contains:                         OK
  /TreeSet/Empty Subset/[Collection] add:                              OK
  /TreeSet/Empty Subset/[Collection] remove:                           OK
  /TreeSet/Empty Subset/[Collection] iterator:                         OK
  /TreeSet/Empty Subset/[Collection] clear:                            OK
  /TreeSet/Empty Subset/[SortedSet] iterator at:                       OK
  /TreeSet/Empty Subset/[SortedSet] lower:                             OK
  /TreeSet/Empty Subset/[SortedSet] higher:                            OK
  /TreeSet/Empty Subset/[SortedSet] ceil:                              OK
  /TreeSet/Empty Subset/[SortedSet] floor:                             OK
  /TreeSet/Empty Subset/[SortedSet] subsets:                           OK
  /TreeSet/Empty Subset/[SortedSet] boundaries:                        OK
  /TreeSet/Head Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeSet/Tail Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeSet/Range Subset/[BidirSortedSet] bi-directional iterator:      OK
  /TreeSet/Empty Subset/[BidirSortedSet] bi-directional iterator:      OK
  /UnrolledLinkedList/[Collection] type correctness:                   OK
  /UnrolledLinkedList/[Collection] iterator returns all elements once: OK
  /UnrolledLinkedList/[Collection] mutable iterator:                   OK
  /UnrolledLinkedList/[Collection] contains, size and is_empty:        OK
  /UnrolledLinkedList/[Collection] add and remove:                     OK
  /UnrolledLinkedList/[Collection] clear:                              OK
  /UnrolledLinkedList/[Collection] add_all:                            OK
  /UnrolledLinkedList/[Collection] contains_all:                       OK
  /UnrolledLinkedList/[Collection] remove_all:                         OK
  /UnrolledLinkedList/[Collection] retain_all:                         OK
  /UnrolledLinkedList/[Collection] to_array:                           OK
  /UnrolledLinkedList/[Collection] GObject properties:                 OK
  /UnrolledLinkedList/[Collection] foreach:                            OK
  /UnrolledLinkedList/[Collection] fold:                               OK
  /UnrolledLinkedList/[Collection] map:                                OK
  /UnrolledLinkedList/[Collection] scan:                               OK
  /UnrolledLinkedList/[Collection] filter:                             OK
  /UnrolledLinkedList/[Collection] chop:                               OK
  /UnrolledLinkedList/[List] iterator is ordered:                      OK
  /UnrolledLinkedList/[List] list iterator:                            OK
  /UnrolledLinkedList/[List] duplicates are retained:                  OK
  /UnrolledLinkedList/[List] get:                                      OK
  /UnrolledLinkedList/[List] set:                                      OK
  /UnrolledLinkedList/[List] insert:                                   OK
  /UnrolledLinkedList/[List] remove_at:                                OK
  /UnrolledLinkedList/[List] index_of:                                 OK
  /UnrolledLinkedList/[List] first:                                    OK
  /UnrolledLinkedList/[List] last:                                     OK
  /UnrolledLinkedList/[List] insert_all:                               OK
  /UnrolledLinkedList/[List] slice:                                    OK
  /UnrolledLinkedList/[List] bi-directional list iterator:             OK
  /UnrolledLinkedList/[UnrolledLinkedList] sort:                       OK
  /UnrolledLinkedList as Deque/[Collection] type correctness:          OK
/UnrolledLinkedList as Deque/[Collection] iterator returns all elements once: OK
  /UnrolledLinkedList as Deque/[Collection] mutable iterator:          OK
/UnrolledLinkedList as Deque/[Collection] contains, size and is_empty: OK
  /UnrolledLinkedList as Deque/[Collection] add and remove:            OK
  /UnrolledLinkedList as Deque/[Collection] clear:                     OK
  /UnrolledLinkedList as Deque/[Collection] add_all:                   OK
  /UnrolledLinkedList as Deque/[Collection] contains_all:              OK
  /UnrolledLinkedList as Deque/[Collection] remove_all:                OK
  /UnrolledLinkedList as Deque/[Collection] retain_all:                OK
  /UnrolledLinkedList as Deque/[Collection] to_array:                  OK
  /UnrolledLinkedList as Deque/[Collection] GObject properties:        OK
  /UnrolledLinkedList as Deque/[Collection] foreach:                   OK
  /UnrolledLinkedList as Deque/[Collection] fold:                      OK
  /UnrolledLinkedList as Deque/[Collection] map:                       OK
  /UnrolledLinkedList as Deque/[Collection] scan:                      OK
  /UnrolledLinkedList as Deque/[Collection] filter:                    OK
  /UnrolledLinkedList as Deque/[Collection] chop:                      OK
  /UnrolledLinkedList as Deque/[Queue] capacity bound:                 OK
  /UnrolledLinkedList as Deque/[Queue] one element operation:          OK
  /UnrolledLinkedList as Deque/[Queue] GObject properties:             OK
  /UnrolledLinkedList as Deque/[Deque] queue use:                      OK
  /UnrolledLinkedList as Deque/[Deque] stack use:                      OK
  /UnrolledLinkedList as Deque/[Deque] reversed stack use:             OK
 /UnrolledLinkedList as Deque/[UnrolledLinkedList] selected functions: OK
PASS: tests
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0/tests'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0/tests'
make[1]: Entering directory '/sources/7.9/libgee-0.18.0'
make  check-local
make[2]: Entering directory '/sources/7.9/libgee-0.18.0'
make[3]: Entering directory '/sources/7.9/libgee-0.18.0/gee'
make[3]: Leaving directory '/sources/7.9/libgee-0.18.0/gee'
make[3]: Entering directory '/sources/7.9/libgee-0.18.0/tests'
TEST: tests... (pid=5243)
  /ArrayList/[Collection] type correctness:                            OK
  /ArrayList/[Collection] iterator returns all elements once:          OK
  /ArrayList/[Collection] mutable iterator:                            OK
  /ArrayList/[Collection] contains, size and is_empty:                 OK
  /ArrayList/[Collection] add and remove:                              OK
  /ArrayList/[Collection] clear:                                       OK
  /ArrayList/[Collection] add_all:                                     OK
  /ArrayList/[Collection] contains_all:                                OK
  /ArrayList/[Collection] remove_all:                                  OK
  /ArrayList/[Collection] retain_all:                                  OK
  /ArrayList/[Collection] to_array:                                    OK
  /ArrayList/[Collection] GObject properties:                          OK
  /ArrayList/[Collection] foreach:                                     OK
  /ArrayList/[Collection] fold:                                        OK
  /ArrayList/[Collection] map:                                         OK
  /ArrayList/[Collection] scan:                                        OK
  /ArrayList/[Collection] filter:                                      OK
  /ArrayList/[Collection] chop:                                        OK
  /ArrayList/[List] iterator is ordered:                               OK
  /ArrayList/[List] list iterator:                                     OK
  /ArrayList/[List] duplicates are retained:                           OK
  /ArrayList/[List] get:                                               OK
  /ArrayList/[List] set:                                               OK
  /ArrayList/[List] insert:                                            OK
  /ArrayList/[List] remove_at:                                         OK
  /ArrayList/[List] index_of:                                          OK
  /ArrayList/[List] first:                                             OK
  /ArrayList/[List] last:                                              OK
  /ArrayList/[List] insert_all:                                        OK
  /ArrayList/[List] slice:                                             OK
  /ArrayList/[List] bi-directional list iterator:                      OK
  /ArrayList/[ArrayList] selected functions:                           OK
  /ArrayList/[ArrayList] small sort (insertion):                       OK
  /ArrayList/[ArrayList] big sort (timsort):                           OK
  /ArrayList/[ArrayList] typed to_array calls:                         OK
  /ArrayQueue/[Collection] type correctness:                           OK
  /ArrayQueue/[Collection] iterator returns all elements once:         OK
  /ArrayQueue/[Collection] mutable iterator:                           OK
  /ArrayQueue/[Collection] contains, size and is_empty:                OK
  /ArrayQueue/[Collection] add and remove:                             OK
  /ArrayQueue/[Collection] clear:                                      OK
  /ArrayQueue/[Collection] add_all:                                    OK
  /ArrayQueue/[Collection] contains_all:                               OK
  /ArrayQueue/[Collection] remove_all:                                 OK
  /ArrayQueue/[Collection] retain_all:                                 OK
  /ArrayQueue/[Collection] to_array:                                   OK
  /ArrayQueue/[Collection] GObject properties:                         OK
  /ArrayQueue/[Collection] foreach:                                    OK
  /ArrayQueue/[Collection] fold:                                       OK
  /ArrayQueue/[Collection] map:                                        OK
  /ArrayQueue/[Collection] scan:                                       OK
  /ArrayQueue/[Collection] filter:                                     OK
  /ArrayQueue/[Collection] chop:                                       OK
  /ArrayQueue/[Queue] capacity bound:                                  OK
  /ArrayQueue/[Queue] one element operation:                           OK
  /ArrayQueue/[Queue] GObject properties:                              OK
  /ArrayQueue/[Deque] queue use:                                       OK
  /ArrayQueue/[Deque] stack use:                                       OK
  /ArrayQueue/[Deque] reversed stack use:                              OK
  /ConcurrentList/[Collection] type correctness:                       OK
  /ConcurrentList/[Collection] iterator returns all elements once:     OK
  /ConcurrentList/[Collection] mutable iterator:                       OK
  /ConcurrentList/[Collection] contains, size and is_empty:            OK
  /ConcurrentList/[Collection] add and remove:                         OK
  /ConcurrentList/[Collection] clear:                                  OK
  /ConcurrentList/[Collection] add_all:                                OK
  /ConcurrentList/[Collection] contains_all:                           OK
  /ConcurrentList/[Collection] remove_all:                             OK
  /ConcurrentList/[Collection] retain_all:                             OK
  /ConcurrentList/[Collection] to_array:                               OK
  /ConcurrentList/[Collection] GObject properties:                     OK
  /ConcurrentList/[Collection] foreach:                                OK
  /ConcurrentList/[Collection] fold:                                   OK
  /ConcurrentList/[Collection] map:                                    OK
  /ConcurrentList/[Collection] scan:                                   OK
  /ConcurrentList/[Collection] filter:                                 OK
  /ConcurrentList/[Collection] chop:                                   OK
  /ConcurrentList/[List] iterator is ordered:                          OK
  /ConcurrentList/[List] list iterator:                                OK
  /ConcurrentList/[List] duplicates are retained:                      OK
  /ConcurrentList/[List] get:                                          OK
  /ConcurrentList/[List] set:                                          OK
  /ConcurrentList/[List] insert:                                       OK
  /ConcurrentList/[List] remove_at:                                    OK
  /ConcurrentList/[List] index_of:                                     OK
  /ConcurrentList/[List] first:                                        OK
  /ConcurrentList/[List] last:                                         OK
  /ConcurrentList/[List] insert_all:                                   OK
  /ConcurrentList/[List] slice:                                        OK
  /ConcurrentSet/[Collection] type correctness:                        OK
  /ConcurrentSet/[Collection] iterator returns all elements once:      OK
  /ConcurrentSet/[Collection] mutable iterator:                        OK
  /ConcurrentSet/[Collection] contains, size and is_empty:             OK
  /ConcurrentSet/[Collection] add and remove:                          OK
  /ConcurrentSet/[Collection] clear:                                   OK
  /ConcurrentSet/[Collection] add_all:                                 OK
  /ConcurrentSet/[Collection] contains_all:                            OK
  /ConcurrentSet/[Collection] remove_all:                              OK
  /ConcurrentSet/[Collection] retain_all:                              OK
  /ConcurrentSet/[Collection] to_array:                                OK
  /ConcurrentSet/[Collection] GObject properties:                      OK
  /ConcurrentSet/[Collection] foreach:                                 OK
  /ConcurrentSet/[Collection] fold:                                    OK
  /ConcurrentSet/[Collection] map:                                     OK
  /ConcurrentSet/[Collection] scan:                                    OK
  /ConcurrentSet/[Collection] filter:                                  OK
  /ConcurrentSet/[Collection] chop:                                    OK
  /ConcurrentSet/[Set] duplicates are ignored:                         OK
  /ConcurrentSet/[SortedSet] first:                                    OK
  /ConcurrentSet/[SortedSet] last:                                     OK
  /ConcurrentSet/[SortedSet] ordering:                                 OK
  /ConcurrentSet/[SortedSet] iterator at:                              OK
  /ConcurrentSet/[SortedSet] lower:                                    OK
  /ConcurrentSet/[SortedSet] higher:                                   OK
  /ConcurrentSet/[SortedSet] floor:                                    OK
  /ConcurrentSet/[SortedSet] ceil:                                     OK
  /ConcurrentSet/Head Subset/[Collection] size:                        OK
  /ConcurrentSet/Head Subset/[Collection] contains:                    OK
  /ConcurrentSet/Head Subset/[Collection] add:                         OK
  /ConcurrentSet/Head Subset/[Collection] remove:                      OK
  /ConcurrentSet/Head Subset/[Collection] iterator:                    OK
  /ConcurrentSet/Head Subset/[Collection] clear:                       OK
  /ConcurrentSet/Head Subset/[SortedSet] iterator at:                  OK
  /ConcurrentSet/Head Subset/[SortedSet] lower:                        OK
  /ConcurrentSet/Head Subset/[SortedSet] higher:                       OK
  /ConcurrentSet/Head Subset/[SortedSet] ceil:                         OK
  /ConcurrentSet/Head Subset/[SortedSet] floor:                        OK
  /ConcurrentSet/Head Subset/[SortedSet] subsets:                      OK
  /ConcurrentSet/Head Subset/[SortedSet] boundaries:                   OK
  /ConcurrentSet/Tail Subset/[Collection] size:                        OK
  /ConcurrentSet/Tail Subset/[Collection] contains:                    OK
  /ConcurrentSet/Tail Subset/[Collection] add:                         OK
  /ConcurrentSet/Tail Subset/[Collection] remove:                      OK
  /ConcurrentSet/Tail Subset/[Collection] iterator:                    OK
  /ConcurrentSet/Tail Subset/[Collection] clear:                       OK
  /ConcurrentSet/Tail Subset/[SortedSet] iterator at:                  OK
  /ConcurrentSet/Tail Subset/[SortedSet] lower:                        OK
  /ConcurrentSet/Tail Subset/[SortedSet] higher:                       OK
  /ConcurrentSet/Tail Subset/[SortedSet] ceil:                         OK
  /ConcurrentSet/Tail Subset/[SortedSet] floor:                        OK
  /ConcurrentSet/Tail Subset/[SortedSet] subsets:                      OK
  /ConcurrentSet/Tail Subset/[SortedSet] boundaries:                   OK
  /ConcurrentSet/Range Subset/[Collection] size:                       OK
  /ConcurrentSet/Range Subset/[Collection] contains:                   OK
  /ConcurrentSet/Range Subset/[Collection] add:                        OK
  /ConcurrentSet/Range Subset/[Collection] remove:                     OK
  /ConcurrentSet/Range Subset/[Collection] iterator:                   OK
  /ConcurrentSet/Range Subset/[Collection] clear:                      OK
  /ConcurrentSet/Range Subset/[SortedSet] iterator at:                 OK
  /ConcurrentSet/Range Subset/[SortedSet] lower:                       OK
  /ConcurrentSet/Range Subset/[SortedSet] higher:                      OK
  /ConcurrentSet/Range Subset/[SortedSet] ceil:                        OK
  /ConcurrentSet/Range Subset/[SortedSet] floor:                       OK
  /ConcurrentSet/Range Subset/[SortedSet] subsets:                     OK
  /ConcurrentSet/Range Subset/[SortedSet] boundaries:                  OK
  /ConcurrentSet/Empty Subset/[Collection] size:                       OK
  /ConcurrentSet/Empty Subset/[Collection] contains:                   OK
  /ConcurrentSet/Empty Subset/[Collection] add:                        OK
  /ConcurrentSet/Empty Subset/[Collection] remove:                     OK
  /ConcurrentSet/Empty Subset/[Collection] iterator:                   OK
  /ConcurrentSet/Empty Subset/[Collection] clear:                      OK
  /ConcurrentSet/Empty Subset/[SortedSet] iterator at:                 OK
  /ConcurrentSet/Empty Subset/[SortedSet] lower:                       OK
  /ConcurrentSet/Empty Subset/[SortedSet] higher:                      OK
  /ConcurrentSet/Empty Subset/[SortedSet] ceil:                        OK
  /ConcurrentSet/Empty Subset/[SortedSet] floor:                       OK
  /ConcurrentSet/Empty Subset/[SortedSet] subsets:                     OK
  /ConcurrentSet/Empty Subset/[SortedSet] boundaries:                  OK
  /Functions/[Functions] comparing and hashing strings:                OK
  /Functions/[Functions] comparing and hashing int:                    OK
  /Functions/[Functions] comparing instances of Comparable:            OK
  /Functions/[Functions] comparing and hashing instances of Hashable:  OK
  /Functions/[Iterator] unfold:                                        OK
  /Functions/[Iterator] concat:                                        OK
  /HashMap/[Map] type correctness:                                     OK
  /HashMap/[Map] has_key, size and is_empty:                           OK
  /HashMap/[Map] keys:                                                 OK
  /HashMap/[Map] values:                                               OK
  /HashMap/[Map] entries:                                              OK
  /HashMap/[Map] set all:                                              OK
  /HashMap/[Map] unset all:                                            OK
  /HashMap/[Map] has all:                                              OK
  /HashMap/[Map] GObject properties:                                   OK
  /HashMap/[Map] fold:                                                 OK
  /HashMap/[Map] foreach:                                              OK
  /HashMultiMap/[MultiMap] type correctness:                           OK
  /HashMultiMap/[MultiMap] size:                                       OK
  /HashMultiMap/[MultiMap] getting and setting:                        OK
  /HashMultiMap/[MultiMap] keys, all keys and values:                  OK
  /HashMultiMap/[HashMultiMap] selected functions:                     OK
  /HashMultiSet/[Collection] type correctness:                         OK
  /HashMultiSet/[Collection] iterator returns all elements once:       OK
  /HashMultiSet/[Collection] mutable iterator:                         OK
  /HashMultiSet/[Collection] contains, size and is_empty:              OK
  /HashMultiSet/[Collection] add and remove:                           OK
  /HashMultiSet/[Collection] clear:                                    OK
  /HashMultiSet/[Collection] add_all:                                  OK
  /HashMultiSet/[Collection] contains_all:                             OK
  /HashMultiSet/[Collection] remove_all:                               OK
  /HashMultiSet/[Collection] retain_all:                               OK
  /HashMultiSet/[Collection] to_array:                                 OK
  /HashMultiSet/[Collection] GObject properties:                       OK
  /HashMultiSet/[Collection] foreach:                                  OK
  /HashMultiSet/[Collection] fold:                                     OK
  /HashMultiSet/[Collection] map:                                      OK
  /HashMultiSet/[Collection] scan:                                     OK
  /HashMultiSet/[Collection] filter:                                   OK
  /HashMultiSet/[Collection] chop:                                     OK
  /HashMultiSet/[MultiSet] duplicates are retained:                    OK
  /HashMultiSet/[HashMultiSet] selected functions:                     OK
  /HashSet/[Collection] type correctness:                              OK
  /HashSet/[Collection] iterator returns all elements once:            OK
  /HashSet/[Collection] mutable iterator:                              OK
  /HashSet/[Collection] contains, size and is_empty:                   OK
  /HashSet/[Collection] add and remove:                                OK
  /HashSet/[Collection] clear:                                         OK
  /HashSet/[Collection] add_all:                                       OK
  /HashSet/[Collection] contains_all:                                  OK
  /HashSet/[Collection] remove_all:                                    OK
  /HashSet/[Collection] retain_all:                                    OK
  /HashSet/[Collection] to_array:                                      OK
  /HashSet/[Collection] GObject properties:                            OK
  /HashSet/[Collection] foreach:                                       OK
  /HashSet/[Collection] fold:                                          OK
  /HashSet/[Collection] map:                                           OK
  /HashSet/[Collection] scan:                                          OK
  /HashSet/[Collection] filter:                                        OK
  /HashSet/[Collection] chop:                                          OK
  /HashSet/[Set] duplicates are ignored:                               OK
  /LinkedList/[Collection] type correctness:                           OK
  /LinkedList/[Collection] iterator returns all elements once:         OK
  /LinkedList/[Collection] mutable iterator:                           OK
  /LinkedList/[Collection] contains, size and is_empty:                OK
  /LinkedList/[Collection] add and remove:                             OK
  /LinkedList/[Collection] clear:                                      OK
  /LinkedList/[Collection] add_all:                                    OK
  /LinkedList/[Collection] contains_all:                               OK
  /LinkedList/[Collection] remove_all:                                 OK
  /LinkedList/[Collection] retain_all:                                 OK
  /LinkedList/[Collection] to_array:                                   OK
  /LinkedList/[Collection] GObject properties:                         OK
  /LinkedList/[Collection] foreach:                                    OK
  /LinkedList/[Collection] fold:                                       OK
  /LinkedList/[Collection] map:                                        OK
  /LinkedList/[Collection] scan:                                       OK
  /LinkedList/[Collection] filter:                                     OK
  /LinkedList/[Collection] chop:                                       OK
  /LinkedList/[List] iterator is ordered:                              OK
  /LinkedList/[List] list iterator:                                    OK
  /LinkedList/[List] duplicates are retained:                          OK
  /LinkedList/[List] get:                                              OK
  /LinkedList/[List] set:                                              OK
  /LinkedList/[List] insert:                                           OK
  /LinkedList/[List] remove_at:                                        OK
  /LinkedList/[List] index_of:                                         OK
  /LinkedList/[List] first:                                            OK
  /LinkedList/[List] last:                                             OK
  /LinkedList/[List] insert_all:                                       OK
  /LinkedList/[List] slice:                                            OK
  /LinkedList/[List] bi-directional list iterator:                     OK
  /LinkedList/[LinkedList] sort:                                       OK
  /LinkedList as Deque/[Collection] type correctness:                  OK
 /LinkedList as Deque/[Collection] iterator returns all elements once: OK
  /LinkedList as Deque/[Collection] mutable iterator:                  OK
  /LinkedList as Deque/[Collection] contains, size and is_empty:       OK
  /LinkedList as Deque/[Collection] add and remove:                    OK
  /LinkedList as Deque/[Collection] clear:                             OK
  /LinkedList as Deque/[Collection] add_all:                           OK
  /LinkedList as Deque/[Collection] contains_all:                      OK
  /LinkedList as Deque/[Collection] remove_all:                        OK
  /LinkedList as Deque/[Collection] retain_all:                        OK
  /LinkedList as Deque/[Collection] to_array:                          OK
  /LinkedList as Deque/[Collection] GObject properties:                OK
  /LinkedList as Deque/[Collection] foreach:                           OK
  /LinkedList as Deque/[Collection] fold:                              OK
  /LinkedList as Deque/[Collection] map:                               OK
  /LinkedList as Deque/[Collection] scan:                              OK
  /LinkedList as Deque/[Collection] filter:                            OK
  /LinkedList as Deque/[Collection] chop:                              OK
  /LinkedList as Deque/[Queue] capacity bound:                         OK
  /LinkedList as Deque/[Queue] one element operation:                  OK
  /LinkedList as Deque/[Queue] GObject properties:                     OK
  /LinkedList as Deque/[Deque] queue use:                              OK
  /LinkedList as Deque/[Deque] stack use:                              OK
  /LinkedList as Deque/[Deque] reversed stack use:                     OK
  /LinkedList as Deque/[LinkedList] selected functions:                OK
  /PriorityQueue/[Collection] type correctness:                        OK
  /PriorityQueue/[Collection] iterator returns all elements once:      OK
  /PriorityQueue/[Collection] mutable iterator:                        OK
  /PriorityQueue/[Collection] contains, size and is_empty:             OK
  /PriorityQueue/[Collection] add and remove:                          OK
  /PriorityQueue/[Collection] clear:                                   OK
  /PriorityQueue/[Collection] add_all:                                 OK
  /PriorityQueue/[Collection] contains_all:                            OK
  /PriorityQueue/[Collection] remove_all:                              OK
  /PriorityQueue/[Collection] retain_all:                              OK
  /PriorityQueue/[Collection] to_array:                                OK
  /PriorityQueue/[Collection] GObject properties:                      OK
  /PriorityQueue/[Collection] foreach:                                 OK
  /PriorityQueue/[Collection] fold:                                    OK
  /PriorityQueue/[Collection] map:                                     OK
  /PriorityQueue/[Collection] scan:                                    OK
  /PriorityQueue/[Collection] filter:                                  OK
  /PriorityQueue/[Collection] chop:                                    OK
  /PriorityQueue/[Queue] capacity bound:                               OK
  /PriorityQueue/[Queue] one element operation:                        OK
  /PriorityQueue/[Queue] GObject properties:                           OK
  /PriorityQueue/[PriorityQueue] poll gives minimum:                   OK
/ReadOnlyBidirList/[ReadOnlyCollection] unique read-only view instance: OK
  /ReadOnlyBidirList/[ReadOnlyCollection] immutable iterator:          OK
  /ReadOnlyBidirList/[ReadOnlyCollection] immutable:                   OK
  /ReadOnlyBidirList/[ReadOnlyCollection] accurate view:               OK
  /ReadOnlyBidirList/[ReadOnlyList] immutable iterator:                OK
  /ReadOnlyBidirList/[ReadOnlyList] immutable:                         OK
  /ReadOnlyBidirList/[ReadOnlyList] accurate view:                     OK
  /ReadOnlyBidirList/[ReadOnlyBidirList] immutable iterator:           OK
/ReadOnlyCollection/[ReadOnlyCollection] unique read-only view instance: OK
  /ReadOnlyCollection/[ReadOnlyCollection] immutable iterator:         OK
  /ReadOnlyCollection/[ReadOnlyCollection] immutable:                  OK
  /ReadOnlyCollection/[ReadOnlyCollection] accurate view:              OK
  /ReadOnlyList/[ReadOnlyCollection] unique read-only view instance:   OK
  /ReadOnlyList/[ReadOnlyCollection] immutable iterator:               OK
  /ReadOnlyList/[ReadOnlyCollection] immutable:                        OK
  /ReadOnlyList/[ReadOnlyCollection] accurate view:                    OK
  /ReadOnlyList/[ReadOnlyList] immutable iterator:                     OK
  /ReadOnlyList/[ReadOnlyList] immutable:                              OK
  /ReadOnlyList/[ReadOnlyList] accurate view:                          OK
  /ReadOnlyMap/[ReadOnlyMap] unique read-only view instance:           OK
  /ReadOnlyMap/[ReadOnlyMap] immutable iterator:                       OK
  /ReadOnlyMap/[ReadOnlyMap] immutable:                                OK
  /ReadOnlyMap/[ReadOnlyMap] accurate view:                            OK
  /ReadOnlySet/[ReadOnlyCollection] unique read-only view instance:    OK
  /ReadOnlySet/[ReadOnlyCollection] immutable iterator:                OK
  /ReadOnlySet/[ReadOnlyCollection] immutable:                         OK
  /ReadOnlySet/[ReadOnlyCollection] accurate view:                     OK
  /TreeMap/[Map] type correctness:                                     OK
  /TreeMap/[Map] has_key, size and is_empty:                           OK
  /TreeMap/[Map] keys:                                                 OK
  /TreeMap/[Map] values:                                               OK
  /TreeMap/[Map] entries:                                              OK
  /TreeMap/[Map] set all:                                              OK
  /TreeMap/[Map] unset all:                                            OK
  /TreeMap/[Map] has all:                                              OK
  /TreeMap/[Map] GObject properties:                                   OK
  /TreeMap/[Map] fold:                                                 OK
  /TreeMap/[Map] foreach:                                              OK
  /TreeMap/[SortedMap] key ordering:                                   OK
  /TreeMap/[SortedMap] first:                                          OK
  /TreeMap/[SortedMap] last:                                           OK
  /TreeMap/[SortedMap] iterator_at:                                    OK
  /TreeMap/[SortedMap] lower:                                          OK
  /TreeMap/[SortedMap] higher:                                         OK
  /TreeMap/[SortedMap] floor:                                          OK
  /TreeMap/[SortedMap] ceil:                                           OK
  /TreeMap/[SortedMap] bi-directional iterators can go backward:       OK
  /TreeMap/[SortedSet] bi-directional iterators can to end:            OK
  /TreeMap/Head Submap/[Map] has_key, size and is_empty:               OK
  /TreeMap/Head Submap/[Map] keys:                                     OK
  /TreeMap/Head Submap/[Map] values:                                   OK
  /TreeMap/Head Submap/[Map] entries:                                  OK
  /TreeMap/Head Submap/[Map] get:                                      OK
  /TreeMap/Head Submap/[Map] set:                                      OK
  /TreeMap/Head Submap/[Map] unset:                                    OK
  /TreeMap/Head Submap/[Map] clear:                                    OK
  /TreeMap/Head Submap/[Map] iterators:                                OK
  /TreeMap/Head Submap/[SortedMap] boundaries:                         OK
  /TreeMap/Head Submap/[SortedMap] lower:                              OK
  /TreeMap/Head Submap/[SortedMap] higher:                             OK
  /TreeMap/Head Submap/[SortedMap] floor:                              OK
  /TreeMap/Head Submap/[SortedMap] ceil:                               OK
  /TreeMap/Head Submap/[SortedMap] iterator_at:                        OK
  /TreeMap/Head Submap/[SortedMap] submap and subsets:                 OK
  /TreeMap/Tail Submap/[Map] has_key, size and is_empty:               OK
  /TreeMap/Tail Submap/[Map] keys:                                     OK
  /TreeMap/Tail Submap/[Map] values:                                   OK
  /TreeMap/Tail Submap/[Map] entries:                                  OK
  /TreeMap/Tail Submap/[Map] get:                                      OK
  /TreeMap/Tail Submap/[Map] set:                                      OK
  /TreeMap/Tail Submap/[Map] unset:                                    OK
  /TreeMap/Tail Submap/[Map] clear:                                    OK
  /TreeMap/Tail Submap/[Map] iterators:                                OK
  /TreeMap/Tail Submap/[SortedMap] boundaries:                         OK
  /TreeMap/Tail Submap/[SortedMap] lower:                              OK
  /TreeMap/Tail Submap/[SortedMap] higher:                             OK
  /TreeMap/Tail Submap/[SortedMap] floor:                              OK
  /TreeMap/Tail Submap/[SortedMap] ceil:                               OK
  /TreeMap/Tail Submap/[SortedMap] iterator_at:                        OK
  /TreeMap/Tail Submap/[SortedMap] submap and subsets:                 OK
  /TreeMap/Range Submap/[Map] has_key, size and is_empty:              OK
  /TreeMap/Range Submap/[Map] keys:                                    OK
  /TreeMap/Range Submap/[Map] values:                                  OK
  /TreeMap/Range Submap/[Map] entries:                                 OK
  /TreeMap/Range Submap/[Map] get:                                     OK
  /TreeMap/Range Submap/[Map] set:                                     OK
  /TreeMap/Range Submap/[Map] unset:                                   OK
  /TreeMap/Range Submap/[Map] clear:                                   OK
  /TreeMap/Range Submap/[Map] iterators:                               OK
  /TreeMap/Range Submap/[SortedMap] boundaries:                        OK
  /TreeMap/Range Submap/[SortedMap] lower:                             OK
  /TreeMap/Range Submap/[SortedMap] higher:                            OK
  /TreeMap/Range Submap/[SortedMap] floor:                             OK
  /TreeMap/Range Submap/[SortedMap] ceil:                              OK
  /TreeMap/Range Submap/[SortedMap] iterator_at:                       OK
  /TreeMap/Range Submap/[SortedMap] submap and subsets:                OK
  /TreeMap/Empty Submap/[Map] has_key, size and is_empty:              OK
  /TreeMap/Empty Submap/[Map] keys:                                    OK
  /TreeMap/Empty Submap/[Map] values:                                  OK
  /TreeMap/Empty Submap/[Map] entries:                                 OK
  /TreeMap/Empty Submap/[Map] get:                                     OK
  /TreeMap/Empty Submap/[Map] set:                                     OK
  /TreeMap/Empty Submap/[Map] unset:                                   OK
  /TreeMap/Empty Submap/[Map] clear:                                   OK
  /TreeMap/Empty Submap/[Map] iterators:                               OK
  /TreeMap/Empty Submap/[SortedMap] boundaries:                        OK
  /TreeMap/Empty Submap/[SortedMap] lower:                             OK
  /TreeMap/Empty Submap/[SortedMap] higher:                            OK
  /TreeMap/Empty Submap/[SortedMap] floor:                             OK
  /TreeMap/Empty Submap/[SortedMap] ceil:                              OK
  /TreeMap/Empty Submap/[SortedMap] iterator_at:                       OK
  /TreeMap/Empty Submap/[SortedMap] submap and subsets:                OK
  /TreeMap/Head Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeMap/Tail Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeMap/Range Subset/[BidirSortedSet] bi-directional iterator:      OK
  /TreeMap/Empty Subset/[BidirSortedSet] bi-directional iterator:      OK
  /TreeMultiMap/[MultiMap] type correctness:                           OK
  /TreeMultiMap/[MultiMap] size:                                       OK
  /TreeMultiMap/[MultiMap] getting and setting:                        OK
  /TreeMultiMap/[MultiMap] keys, all keys and values:                  OK
  /TreeMultiSet/[Collection] type correctness:                         OK
  /TreeMultiSet/[Collection] iterator returns all elements once:       OK
  /TreeMultiSet/[Collection] mutable iterator:                         OK
  /TreeMultiSet/[Collection] contains, size and is_empty:              OK
  /TreeMultiSet/[Collection] add and remove:                           OK
  /TreeMultiSet/[Collection] clear:                                    OK
  /TreeMultiSet/[Collection] add_all:                                  OK
  /TreeMultiSet/[Collection] contains_all:                             OK
  /TreeMultiSet/[Collection] remove_all:                               OK
  /TreeMultiSet/[Collection] retain_all:                               OK
  /TreeMultiSet/[Collection] to_array:                                 OK
  /TreeMultiSet/[Collection] GObject properties:                       OK
  /TreeMultiSet/[Collection] foreach:                                  OK
  /TreeMultiSet/[Collection] fold:                                     OK
  /TreeMultiSet/[Collection] map:                                      OK
  /TreeMultiSet/[Collection] scan:                                     OK
  /TreeMultiSet/[Collection] filter:                                   OK
  /TreeMultiSet/[Collection] chop:                                     OK
  /TreeMultiSet/[MultiSet] duplicates are retained:                    OK
  /TreeSet/[Collection] type correctness:                              OK
  /TreeSet/[Collection] iterator returns all elements once:            OK
  /TreeSet/[Collection] mutable iterator:                              OK
  /TreeSet/[Collection] contains, size and is_empty:                   OK
  /TreeSet/[Collection] add and remove:                                OK
  /TreeSet/[Collection] clear:                                         OK
  /TreeSet/[Collection] add_all:                                       OK
  /TreeSet/[Collection] contains_all:                                  OK
  /TreeSet/[Collection] remove_all:                                    OK
  /TreeSet/[Collection] retain_all:                                    OK
  /TreeSet/[Collection] to_array:                                      OK
  /TreeSet/[Collection] GObject properties:                            OK
  /TreeSet/[Collection] foreach:                                       OK
  /TreeSet/[Collection] fold:                                          OK
  /TreeSet/[Collection] map:                                           OK
  /TreeSet/[Collection] scan:                                          OK
  /TreeSet/[Collection] filter:                                        OK
  /TreeSet/[Collection] chop:                                          OK
  /TreeSet/[Set] duplicates are ignored:                               OK
  /TreeSet/[SortedSet] first:                                          OK
  /TreeSet/[SortedSet] last:                                           OK
  /TreeSet/[SortedSet] ordering:                                       OK
  /TreeSet/[SortedSet] iterator at:                                    OK
  /TreeSet/[SortedSet] lower:                                          OK
  /TreeSet/[SortedSet] higher:                                         OK
  /TreeSet/[SortedSet] floor:                                          OK
  /TreeSet/[SortedSet] ceil:                                           OK
  /TreeSet/[SortedSet] bi-directional iterators can go backward:       OK
  /TreeSet/[SortedSet] bi-directional iterators are mutable:           OK
  /TreeSet/[SortedSet] bi-directional iterators can to beginning:      OK
  /TreeSet/[SortedSet] bi-directional iterators can to end:            OK
  /TreeSet/[TreeSet] add and remove:                                   OK
  /TreeSet/Head Subset/[Collection] size:                              OK
  /TreeSet/Head Subset/[Collection] contains:                          OK
  /TreeSet/Head Subset/[Collection] add:                               OK
  /TreeSet/Head Subset/[Collection] remove:                            OK
  /TreeSet/Head Subset/[Collection] iterator:                          OK
  /TreeSet/Head Subset/[Collection] clear:                             OK
  /TreeSet/Head Subset/[SortedSet] iterator at:                        OK
  /TreeSet/Head Subset/[SortedSet] lower:                              OK
  /TreeSet/Head Subset/[SortedSet] higher:                             OK
  /TreeSet/Head Subset/[SortedSet] ceil:                               OK
  /TreeSet/Head Subset/[SortedSet] floor:                              OK
  /TreeSet/Head Subset/[SortedSet] subsets:                            OK
  /TreeSet/Head Subset/[SortedSet] boundaries:                         OK
  /TreeSet/Tail Subset/[Collection] size:                              OK
  /TreeSet/Tail Subset/[Collection] contains:                          OK
  /TreeSet/Tail Subset/[Collection] add:                               OK
  /TreeSet/Tail Subset/[Collection] remove:                            OK
  /TreeSet/Tail Subset/[Collection] iterator:                          OK
  /TreeSet/Tail Subset/[Collection] clear:                             OK
  /TreeSet/Tail Subset/[SortedSet] iterator at:                        OK
  /TreeSet/Tail Subset/[SortedSet] lower:                              OK
  /TreeSet/Tail Subset/[SortedSet] higher:                             OK
  /TreeSet/Tail Subset/[SortedSet] ceil:                               OK
  /TreeSet/Tail Subset/[SortedSet] floor:                              OK
  /TreeSet/Tail Subset/[SortedSet] subsets:                            OK
  /TreeSet/Tail Subset/[SortedSet] boundaries:                         OK
  /TreeSet/Range Subset/[Collection] size:                             OK
  /TreeSet/Range Subset/[Collection] contains:                         OK
  /TreeSet/Range Subset/[Collection] add:                              OK
  /TreeSet/Range Subset/[Collection] remove:                           OK
  /TreeSet/Range Subset/[Collection] iterator:                         OK
  /TreeSet/Range Subset/[Collection] clear:                            OK
  /TreeSet/Range Subset/[SortedSet] iterator at:                       OK
  /TreeSet/Range Subset/[SortedSet] lower:                             OK
  /TreeSet/Range Subset/[SortedSet] higher:                            OK
  /TreeSet/Range Subset/[SortedSet] ceil:                              OK
  /TreeSet/Range Subset/[SortedSet] floor:                             OK
  /TreeSet/Range Subset/[SortedSet] subsets:                           OK
  /TreeSet/Range Subset/[SortedSet] boundaries:                        OK
  /TreeSet/Empty Subset/[Collection] size:                             OK
  /TreeSet/Empty Subset/[Collection] contains:                         OK
  /TreeSet/Empty Subset/[Collection] add:                              OK
  /TreeSet/Empty Subset/[Collection] remove:                           OK
  /TreeSet/Empty Subset/[Collection] iterator:                         OK
  /TreeSet/Empty Subset/[Collection] clear:                            OK
  /TreeSet/Empty Subset/[SortedSet] iterator at:                       OK
  /TreeSet/Empty Subset/[SortedSet] lower:                             OK
  /TreeSet/Empty Subset/[SortedSet] higher:                            OK
  /TreeSet/Empty Subset/[SortedSet] ceil:                              OK
  /TreeSet/Empty Subset/[SortedSet] floor:                             OK
  /TreeSet/Empty Subset/[SortedSet] subsets:                           OK
  /TreeSet/Empty Subset/[SortedSet] boundaries:                        OK
  /TreeSet/Head Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeSet/Tail Subset/[BidirSortedSet] bi-directional iterator:       OK
  /TreeSet/Range Subset/[BidirSortedSet] bi-directional iterator:      OK
  /TreeSet/Empty Subset/[BidirSortedSet] bi-directional iterator:      OK
  /UnrolledLinkedList/[Collection] type correctness:                   OK
  /UnrolledLinkedList/[Collection] iterator returns all elements once: OK
  /UnrolledLinkedList/[Collection] mutable iterator:                   OK
  /UnrolledLinkedList/[Collection] contains, size and is_empty:        OK
  /UnrolledLinkedList/[Collection] add and remove:                     OK
  /UnrolledLinkedList/[Collection] clear:                              OK
  /UnrolledLinkedList/[Collection] add_all:                            OK
  /UnrolledLinkedList/[Collection] contains_all:                       OK
  /UnrolledLinkedList/[Collection] remove_all:                         OK
  /UnrolledLinkedList/[Collection] retain_all:                         OK
  /UnrolledLinkedList/[Collection] to_array:                           OK
  /UnrolledLinkedList/[Collection] GObject properties:                 OK
  /UnrolledLinkedList/[Collection] foreach:                            OK
  /UnrolledLinkedList/[Collection] fold:                               OK
  /UnrolledLinkedList/[Collection] map:                                OK
  /UnrolledLinkedList/[Collection] scan:                               OK
  /UnrolledLinkedList/[Collection] filter:                             OK
  /UnrolledLinkedList/[Collection] chop:                               OK
  /UnrolledLinkedList/[List] iterator is ordered:                      OK
  /UnrolledLinkedList/[List] list iterator:                            OK
  /UnrolledLinkedList/[List] duplicates are retained:                  OK
  /UnrolledLinkedList/[List] get:                                      OK
  /UnrolledLinkedList/[List] set:                                      OK
  /UnrolledLinkedList/[List] insert:                                   OK
  /UnrolledLinkedList/[List] remove_at:                                OK
  /UnrolledLinkedList/[List] index_of:                                 OK
  /UnrolledLinkedList/[List] first:                                    OK
  /UnrolledLinkedList/[List] last:                                     OK
  /UnrolledLinkedList/[List] insert_all:                               OK
  /UnrolledLinkedList/[List] slice:                                    OK
  /UnrolledLinkedList/[List] bi-directional list iterator:             OK
  /UnrolledLinkedList/[UnrolledLinkedList] sort:                       OK
  /UnrolledLinkedList as Deque/[Collection] type correctness:          OK
/UnrolledLinkedList as Deque/[Collection] iterator returns all elements once: OK
  /UnrolledLinkedList as Deque/[Collection] mutable iterator:          OK
/UnrolledLinkedList as Deque/[Collection] contains, size and is_empty: OK
  /UnrolledLinkedList as Deque/[Collection] add and remove:            OK
  /UnrolledLinkedList as Deque/[Collection] clear:                     OK
  /UnrolledLinkedList as Deque/[Collection] add_all:                   OK
  /UnrolledLinkedList as Deque/[Collection] contains_all:              OK
  /UnrolledLinkedList as Deque/[Collection] remove_all:                OK
  /UnrolledLinkedList as Deque/[Collection] retain_all:                OK
  /UnrolledLinkedList as Deque/[Collection] to_array:                  OK
  /UnrolledLinkedList as Deque/[Collection] GObject properties:        OK
  /UnrolledLinkedList as Deque/[Collection] foreach:                   OK
  /UnrolledLinkedList as Deque/[Collection] fold:                      OK
  /UnrolledLinkedList as Deque/[Collection] map:                       OK
  /UnrolledLinkedList as Deque/[Collection] scan:                      OK
  /UnrolledLinkedList as Deque/[Collection] filter:                    OK
  /UnrolledLinkedList as Deque/[Collection] chop:                      OK
  /UnrolledLinkedList as Deque/[Queue] capacity bound:                 OK
  /UnrolledLinkedList as Deque/[Queue] one element operation:          OK
  /UnrolledLinkedList as Deque/[Queue] GObject properties:             OK
  /UnrolledLinkedList as Deque/[Deque] queue use:                      OK
  /UnrolledLinkedList as Deque/[Deque] stack use:                      OK
  /UnrolledLinkedList as Deque/[Deque] reversed stack use:             OK
 /UnrolledLinkedList as Deque/[UnrolledLinkedList] selected functions: OK
PASS: tests
make[3]: Leaving directory '/sources/7.9/libgee-0.18.0/tests'
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0'
Making install in gee
make[1]: Entering directory '/sources/7.9/libgee-0.18.0/gee'
  CCLD     libgee-0.8.la
/usr/bin/g-ir-compiler -l `/bin/sed -nE "s/^dlname='([A-Za-z0-9.+-]+)'/\1/p" libgee-0.8.la` -o Gee-0.8.typelib Gee-0.8.gir libgee-0.8.la
make[2]: Entering directory '/sources/7.9/libgee-0.18.0/gee'
  CCLD     libgee-0.8.la
 /bin/mkdir -p '/usr/lib'
 /bin/sh ../libtool   --mode=install /usr/bin/install -c   libgee-0.8.la '/usr/lib'
libtool: install: /usr/bin/install -c .libs/libgee-0.8.so.2.5.1 /usr/lib/libgee-0.8.so.2.5.1
libtool: install: (cd /usr/lib && { ln -s -f libgee-0.8.so.2.5.1 libgee-0.8.so.2 || { rm -f libgee-0.8.so.2 && ln -s libgee-0.8.so.2.5.1 libgee-0.8.so.2; }; })
libtool: install: (cd /usr/lib && { ln -s -f libgee-0.8.so.2.5.1 libgee-0.8.so || { rm -f libgee-0.8.so && ln -s libgee-0.8.so.2.5.1 libgee-0.8.so; }; })
libtool: install: /usr/bin/install -c .libs/libgee-0.8.lai /usr/lib/libgee-0.8.la
libtool: finish: PATH="/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc:/sbin" ldconfig -n /usr/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /usr/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
 /bin/mkdir -p '/usr/share/gir-1.0'
 /usr/bin/install -c -m 644 Gee-0.8.gir '/usr/share/gir-1.0'
 /bin/mkdir -p '/usr/share/vala/vapi'
 /usr/bin/install -c -m 644 gee-0.8.vapi '/usr/share/vala/vapi'
 /bin/mkdir -p '/usr/include/gee-0.8'
 /usr/bin/install -c -m 644 gee.h '/usr/include/gee-0.8'
/usr/bin/g-ir-compiler -l `/bin/sed -nE "s/^dlname='([A-Za-z0-9.+-]+)'/\1/p" libgee-0.8.la` -o Gee-0.8.typelib Gee-0.8.gir libgee-0.8.la
 /bin/mkdir -p '/usr/lib/girepository-1.0'
 /usr/bin/install -c -m 644 Gee-0.8.typelib '/usr/lib/girepository-1.0'
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0/gee'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0/gee'
Making install in tests
make[1]: Entering directory '/sources/7.9/libgee-0.18.0/tests'
make[2]: Entering directory '/sources/7.9/libgee-0.18.0/tests'
make[2]: Nothing to be done for 'install-exec-am'.
make[2]: Nothing to be done for 'install-data-am'.
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0/tests'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0/tests'
make[1]: Entering directory '/sources/7.9/libgee-0.18.0'
make[2]: Entering directory '/sources/7.9/libgee-0.18.0'
make[2]: Nothing to be done for 'install-exec-am'.
 /bin/mkdir -p '/usr/lib/pkgconfig'
 /usr/bin/install -c -m 644 gee-0.8.pc '/usr/lib/pkgconfig'
make[2]: Leaving directory '/sources/7.9/libgee-0.18.0'
make[1]: Leaving directory '/sources/7.9/libgee-0.18.0'
